.data
matrix1: .space 100
endMatrix1:
matrix2: .space 100
endMatrix2:
matrix3: .space 100
endMatrix3:

str1: .asciiz "enter the number of rows for the first matrix: "
str2: .asciiz "enter the number of columns for the first matrix: "
str3: .asciiz "enter the number of rows for the second matrix: "
str4: .asciiz "enter the number of columns for the second matrix: "
str5: .asciiz "WARNING: dimensions are illegal! Enter new values: "
str6: .asciiz "Enter a string with "
str7: .asciiz " numbers in it: "

.text
li $t1, 100 # max number of characters to be read
li $t3, 32 # loading the ascii value of a space value

#allocating space for the matrix
li  $t1,15
li  $t2,10
mul $a0, $t1, $t2
sll $a0, $a0, 2   # multiply number of elements by 2^3 = 8
                  # because each double precision floating point number takes 8 bytes
li  $v0, 9
syscall
move $s4,$v0   # save array address in $s4
#end of allocating space for the matrix

la $a0, str1 #loading the address of str1
li $v0, 51 # sending out the message to enter first value
syscall
addi $s0, $a0, 0 # store the amount of rows of the first matrix in $s0

la $a0, str2 #loading the address of str2
li $v0, 51 # sending out the message to enter first value
syscall
addi $s1, $a0, 0 # store the amount of columns of the first matrix in $s1

la $a0, str3 #loading the address of str3
li $v0, 51 # sending out the message to enter first value
syscall
addi $s2, $a0, 0 # store the amount of rows of the second matrix in $s2

la $a0, str4 #loading the address of str1
li $v0, 51 # sending out the message to enter first value
syscall
addi $s3, $a0, 0 # store the amount of columns of the second matrix in $s3

# if the columns of the first and the rows of the second do not match then send an error message and take in the dimensions again
beq $s1, $s2, skipError
Error:
la $a0, str5 #loading the address of str5
li $a1, 0 # sending out an error message
li $v0, 55 # send out an error message
syscall

la $a0, str2 #loading the address of str2
li $v0, 51 # sending out the message to enter first value
syscall
addi $s1, $a0, 0 # store the amount of columns of the first matrix in $s1

la $a0, str3 #loading the address of str3
li $v0, 51 # sending out the message to enter first value
syscall
addi $s2, $a0, 0 # store the amount of rows of the second matrix in $s2
bne $s1, $s2, Error

skipError:
addi $t0, $s0, 0 # save the value of m in $t0
addi $t8, $s1, 0 # save the valye of n in $t8

mLoop1:
la $a0, str6 # load the address of str6
li $v0, 4
syscall

la $a0, 0($s1) # load the address of what's stored in $s1 -- aka. the # or cols of first matrix
li $v0, 1
syscall

#WE ARE WORKING ON THIS!!!
la $a0, str7 #loading the address of str7
li $a1, 100 # 100 is max number of characters to read -- CHANGED THIS!!
li $v0, 4 # sending out the message to enter the row of values
syscall
li $a1, 100 # 100 is max number of characters to read -- CHANGED THIS!!
li $v0, 8 # to read in the input
addi $s5, $a0, 0 # store the user input into $s5

# parse the input and put into the matrix:
la $a2, matrix1 # storing the address of the first matrix
la $a3, endMatrix1 # loading the end of the first matrix

LoopAtoi1:
addi $sp, $sp, -4 # move the stack pointer down
sw $ra, 0($sp) # store the $ra (location)

#beq $a2, $a3, rowFinished # if we've reached the end of the input the row is finished

lbu $t4, ($s5)         # load unsigned char from string
beq $t1, $zero, increaseCount  # is it a NULL terminator?
beq $t4, $t3, skipPutInMatrix  # is it a space?
jal putInMatrix
skipPutInMatrix:
addi $t4, $t4, -48     # convert $t1's ascii value to decimal
mul $s6, $s6, $t0      # int_val *= 10
add $s6, $s6, $t4      # int_val += array[s1] - '0'
addi $s5, $s5, 1       # $s1 is next char's address 
addi $t9, $t4, 0	# save our $t4 value 

# i think this is wrong
lw $ra, 0($sp) #restore the stack pointer
addi $sp, $sp, 4
jr $ra

putInMatrix:
sw $t9, 0($a2) # store the ascii value into the matrix
addi $a2, $a2, 4 # increase the address of the matrix by 4

lw $ra, 0($sp) #restore the stack pointer
addi $sp, $sp, 4
jr $ra # and go back

increaseCount:
addi $t0, $t0, 1 # increase the counter
bne $t0, $s0, mLoop1

# now matrix 2:
addi $t8, $s4, 0 # save the value of p in $t8
addi $t0, $s1, 0 # save the valye of n in $t0

nLoop2:
la $a0, str6 # load the address of str6
li $v0, 4
syscall

la $a0, 0($s1) # load the address of what's stored in $s1 -- aka. the # or cols of first matrix
li $v0, 1
syscall

la $a0, str7 #loading the address of str1
la $a1, 100 # 100 is max number of characters to read
li $v0, 8 # sending out the message to enter the row of values
syscall
addi $s5, $a0, 0 # store the user input into $s5

# parse the input and put into the matrix:
la $a2, matrix2 # storing the address of the first matrix
la $a3, endMatrix2 # loading the end of the first matrix

LoopAtoi2:
addi $sp, $sp, -4 # move the stack pointer down
sw $ra, 0($sp) # store the $ra (location)

lbu $t4, ($s5)         # load unsigned char from string
beq $t1, $zero, increaseCount2  # is it a NULL terminator?
beq $t4, $t3, skipPutInMatrix2  # is it a space?
jal putInMatrix2
skipPutInMatrix2:
addi $t4, $t4, -48     # convert $t1's ascii value to decimal
mul $s6, $s6, $t0      # int_val *= 10
add $s6, $s6, $t4      # int_val += array[s1] - '0'
addi $s5, $s5, 1       # $s1 is next char's address 
addi $t9, $t4, 0	# save our $t4 value 

# i think this is wrong
j LoopAtoi2 #?
lw $ra, 0($sp) #restore the stack pointer
addi $sp, $sp, 4
jr $ra

putInMatrix2:
sw $t9, 0($a2) # store the ascii value into the matrix
addi $a2, $a2, 4 # increase the address of the matrix by 4

lw $ra, 0($sp) #restore the stack pointer
addi $sp, $sp, 4
jr $ra # and go back

increaseCount2:
addi $t0, $t0, 1 # increase the counter
bne $t0, $s2, nLoop2



AboveAndBeyondLoop:
OuterMultLoop:
InnerMultLoop:
li $t4, 4 # to store 4
li $t5, 0 # counter for the innermost loop to see if we have reached the amount of rows in the first matrix

la $a2, matrix1 # storing the address of the first matrix
la $a3, endMatrix1 # loading the end of the first matrix

la $s0, matrix2 # storing the address of the second matrix
la $s1, endMatrix2 # storing the end of the second matrix

li $t1, 0 # this will hold the sum

lw $t2, 0($a2) # loading the 11 element in the first matrix
lw $t3, 0($s0) # loading the 11 element in the second matrix

mult $t2, $t3 # multiply them together
mflo $t0 # store the product into $t0
add $t1, $t1, $t0 # add the product to the sum

addi $t5, $t5, 1 # increase the counter for the innermost loop by 1


addi $a2, $a2, 4 # increase the address by 4
mult $s3, $t4 # multiply the number of columns by 4
mflo $t0 # store this number into $t0
add $s3, $s3, $t0 # increase the second array by 4*the amount of columns in the second matrix



# if we've reached the end of a row of matrix 1 then leave this loop
# if we've reached the end of the second matrix, leave the second loop
# if we've reached the end of the first matrix the number of columns of the second matrix times then we're done










